/*
 * This file is generated by jOOQ.
 */
package uk.ncl.rohingillgallon.jooq.model.tables;


import java.util.Collection;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import uk.ncl.rohingillgallon.jooq.model.Keys;
import uk.ncl.rohingillgallon.jooq.model.Public;
import uk.ncl.rohingillgallon.jooq.model.tables.records.ApplistRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Applist extends TableImpl<ApplistRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.applist</code>
     */
    public static final Applist APPLIST = new Applist();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ApplistRecord> getRecordType() {
        return ApplistRecord.class;
    }

    /**
     * The column <code>public.applist.unique_entry_id</code>.
     */
    public final TableField<ApplistRecord, Integer> UNIQUE_ENTRY_ID = createField(DSL.name("unique_entry_id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.applist.appid</code>.
     */
    public final TableField<ApplistRecord, Integer> APPID = createField(DSL.name("appid"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.applist.appname</code>.
     */
    public final TableField<ApplistRecord, String> APPNAME = createField(DSL.name("appname"), SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>public.applist.appstarttime</code>.
     */
    public final TableField<ApplistRecord, Double> APPSTARTTIME = createField(DSL.name("appstarttime"), SQLDataType.DOUBLE.nullable(false), this, "");

    /**
     * The column <code>public.applist.clouddatacentername</code>.
     */
    public final TableField<ApplistRecord, String> CLOUDDATACENTERNAME = createField(DSL.name("clouddatacentername"), SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>public.applist.clouddcid</code>.
     */
    public final TableField<ApplistRecord, Integer> CLOUDDCID = createField(DSL.name("clouddcid"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.applist.datarate</code>.
     */
    public final TableField<ApplistRecord, Double> DATARATE = createField(DSL.name("datarate"), SQLDataType.DOUBLE.nullable(false), this, "");

    /**
     * The column <code>public.applist.edgedatacentername</code>.
     */
    public final TableField<ApplistRecord, String> EDGEDATACENTERNAME = createField(DSL.name("edgedatacentername"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>public.applist.edgedcid</code>.
     */
    public final TableField<ApplistRecord, Integer> EDGEDCID = createField(DSL.name("edgedcid"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.applist.edgeletlist</code>.
     */
    public final TableField<ApplistRecord, String> EDGELETLIST = createField(DSL.name("edgeletlist"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.applist.endtime</code>.
     */
    public final TableField<ApplistRecord, Double> ENDTIME = createField(DSL.name("endtime"), SQLDataType.DOUBLE.nullable(false), this, "");

    /**
     * The column <code>public.applist.iotdevicebatteryconsumption</code>.
     */
    public final TableField<ApplistRecord, Double> IOTDEVICEBATTERYCONSUMPTION = createField(DSL.name("iotdevicebatteryconsumption"), SQLDataType.DOUBLE.nullable(false), this, "");

    /**
     * The column <code>public.applist.iotdevicebatterystatus</code>.
     */
    public final TableField<ApplistRecord, String> IOTDEVICEBATTERYSTATUS = createField(DSL.name("iotdevicebatterystatus"), SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>public.applist.iotdeviceid</code>.
     */
    public final TableField<ApplistRecord, Integer> IOTDEVICEID = createField(DSL.name("iotdeviceid"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.applist.iotdevicename</code>.
     */
    public final TableField<ApplistRecord, String> IOTDEVICENAME = createField(DSL.name("iotdevicename"), SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>public.applist.iotdeviceoutputsize</code>.
     */
    public final TableField<ApplistRecord, Integer> IOTDEVICEOUTPUTSIZE = createField(DSL.name("iotdeviceoutputsize"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.applist.isiotdevicedied</code>.
     */
    public final TableField<ApplistRecord, String> ISIOTDEVICEDIED = createField(DSL.name("isiotdevicedied"), SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>public.applist.melid</code>.
     */
    public final TableField<ApplistRecord, Integer> MELID = createField(DSL.name("melid"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.applist.melname</code>.
     */
    public final TableField<ApplistRecord, String> MELNAME = createField(DSL.name("melname"), SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>public.applist.meloutputsize</code>.
     */
    public final TableField<ApplistRecord, Integer> MELOUTPUTSIZE = createField(DSL.name("meloutputsize"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.applist.osmesiscloudletsize</code>.
     */
    public final TableField<ApplistRecord, Integer> OSMESISCLOUDLETSIZE = createField(DSL.name("osmesiscloudletsize"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.applist.osmesisedgeletsize</code>.
     */
    public final TableField<ApplistRecord, Integer> OSMESISEDGELETSIZE = createField(DSL.name("osmesisedgeletsize"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.applist.startdatagenerationtime</code>.
     */
    public final TableField<ApplistRecord, Double> STARTDATAGENERATIONTIME = createField(DSL.name("startdatagenerationtime"), SQLDataType.DOUBLE.nullable(false), this, "");

    /**
     * The column <code>public.applist.stopdatagenerationtime</code>.
     */
    public final TableField<ApplistRecord, Double> STOPDATAGENERATIONTIME = createField(DSL.name("stopdatagenerationtime"), SQLDataType.DOUBLE.nullable(false), this, "");

    /**
     * The column <code>public.applist.vmcloudid</code>.
     */
    public final TableField<ApplistRecord, Integer> VMCLOUDID = createField(DSL.name("vmcloudid"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.applist.vmname</code>.
     */
    public final TableField<ApplistRecord, String> VMNAME = createField(DSL.name("vmname"), SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>public.applist.workflowid</code>.
     */
    public final TableField<ApplistRecord, Integer> WORKFLOWID = createField(DSL.name("workflowid"), SQLDataType.INTEGER.nullable(false), this, "");

    private Applist(Name alias, Table<ApplistRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Applist(Name alias, Table<ApplistRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.applist</code> table reference
     */
    public Applist(String alias) {
        this(DSL.name(alias), APPLIST);
    }

    /**
     * Create an aliased <code>public.applist</code> table reference
     */
    public Applist(Name alias) {
        this(alias, APPLIST);
    }

    /**
     * Create a <code>public.applist</code> table reference
     */
    public Applist() {
        this(DSL.name("applist"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<ApplistRecord, Integer> getIdentity() {
        return (Identity<ApplistRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<ApplistRecord> getPrimaryKey() {
        return Keys.APPLIST_PKEY;
    }

    @Override
    public Applist as(String alias) {
        return new Applist(DSL.name(alias), this);
    }

    @Override
    public Applist as(Name alias) {
        return new Applist(alias, this);
    }

    @Override
    public Applist as(Table<?> alias) {
        return new Applist(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Applist rename(String name) {
        return new Applist(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Applist rename(Name name) {
        return new Applist(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Applist rename(Table<?> name) {
        return new Applist(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Applist where(Condition condition) {
        return new Applist(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Applist where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Applist where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Applist where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Applist where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Applist where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Applist where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Applist where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Applist whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Applist whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
