/*
 * This file is generated by jOOQ.
 */
package uk.ncl.rohingillgallon.jooq.model;


import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;

import uk.ncl.rohingillgallon.jooq.model.tables.Accuratebatteryinfo;
import uk.ncl.rohingillgallon.jooq.model.tables.Applist;
import uk.ncl.rohingillgallon.jooq.model.tables.Bandwidthshareinfo;
import uk.ncl.rohingillgallon.jooq.model.tables.Connectionpersimtime;
import uk.ncl.rohingillgallon.jooq.model.tables.Datacenterenergyconsumption;
import uk.ncl.rohingillgallon.jooq.model.tables.Historyentry;
import uk.ncl.rohingillgallon.jooq.model.tables.Hostpowerconsumption;
import uk.ncl.rohingillgallon.jooq.model.tables.Neighbourschange;
import uk.ncl.rohingillgallon.jooq.model.tables.Osmoticappsstats;
import uk.ncl.rohingillgallon.jooq.model.tables.Overallappresults;
import uk.ncl.rohingillgallon.jooq.model.tables.Powerutilisationhistory;
import uk.ncl.rohingillgallon.jooq.model.tables.Rsuinformation;
import uk.ncl.rohingillgallon.jooq.model.tables.Switchpowerconsumption;
import uk.ncl.rohingillgallon.jooq.model.tables.TimedScc;
import uk.ncl.rohingillgallon.jooq.model.tables.Vehinformation;
import uk.ncl.rohingillgallon.jooq.model.tables.records.AccuratebatteryinfoRecord;
import uk.ncl.rohingillgallon.jooq.model.tables.records.ApplistRecord;
import uk.ncl.rohingillgallon.jooq.model.tables.records.BandwidthshareinfoRecord;
import uk.ncl.rohingillgallon.jooq.model.tables.records.ConnectionpersimtimeRecord;
import uk.ncl.rohingillgallon.jooq.model.tables.records.DatacenterenergyconsumptionRecord;
import uk.ncl.rohingillgallon.jooq.model.tables.records.HistoryentryRecord;
import uk.ncl.rohingillgallon.jooq.model.tables.records.HostpowerconsumptionRecord;
import uk.ncl.rohingillgallon.jooq.model.tables.records.NeighbourschangeRecord;
import uk.ncl.rohingillgallon.jooq.model.tables.records.OsmoticappsstatsRecord;
import uk.ncl.rohingillgallon.jooq.model.tables.records.OverallappresultsRecord;
import uk.ncl.rohingillgallon.jooq.model.tables.records.PowerutilisationhistoryRecord;
import uk.ncl.rohingillgallon.jooq.model.tables.records.RsuinformationRecord;
import uk.ncl.rohingillgallon.jooq.model.tables.records.SwitchpowerconsumptionRecord;
import uk.ncl.rohingillgallon.jooq.model.tables.records.TimedSccRecord;
import uk.ncl.rohingillgallon.jooq.model.tables.records.VehinformationRecord;


/**
 * A class modelling foreign key relationships and constraints of tables in
 * public.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Keys {

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<AccuratebatteryinfoRecord> ACCURATEBATTERYINFO_PKEY = Internal.createUniqueKey(Accuratebatteryinfo.ACCURATEBATTERYINFO, DSL.name("accuratebatteryinfo_pkey"), new TableField[] { Accuratebatteryinfo.ACCURATEBATTERYINFO.UNIQUE_ENTRY_ID }, true);
    public static final UniqueKey<ApplistRecord> APPLIST_PKEY = Internal.createUniqueKey(Applist.APPLIST, DSL.name("applist_pkey"), new TableField[] { Applist.APPLIST.UNIQUE_ENTRY_ID }, true);
    public static final UniqueKey<BandwidthshareinfoRecord> BANDWIDTHSHAREINFO_PKEY = Internal.createUniqueKey(Bandwidthshareinfo.BANDWIDTHSHAREINFO, DSL.name("bandwidthshareinfo_pkey"), new TableField[] { Bandwidthshareinfo.BANDWIDTHSHAREINFO.UNIQUE_ENTRY_ID }, true);
    public static final UniqueKey<ConnectionpersimtimeRecord> CONNECTIONPERSIMTIME_PKEY = Internal.createUniqueKey(Connectionpersimtime.CONNECTIONPERSIMTIME, DSL.name("connectionpersimtime_pkey"), new TableField[] { Connectionpersimtime.CONNECTIONPERSIMTIME.UNIQUE_ENTRY_ID }, true);
    public static final UniqueKey<DatacenterenergyconsumptionRecord> DATACENTERENERGYCONSUMPTION_PKEY = Internal.createUniqueKey(Datacenterenergyconsumption.DATACENTERENERGYCONSUMPTION, DSL.name("datacenterenergyconsumption_pkey"), new TableField[] { Datacenterenergyconsumption.DATACENTERENERGYCONSUMPTION.UNIQUE_ENTRY_ID }, true);
    public static final UniqueKey<HistoryentryRecord> HISTORYENTRY_PKEY = Internal.createUniqueKey(Historyentry.HISTORYENTRY, DSL.name("historyentry_pkey"), new TableField[] { Historyentry.HISTORYENTRY.UNIQUE_ENTRY_ID }, true);
    public static final UniqueKey<HostpowerconsumptionRecord> HOSTPOWERCONSUMPTION_PKEY = Internal.createUniqueKey(Hostpowerconsumption.HOSTPOWERCONSUMPTION, DSL.name("hostpowerconsumption_pkey"), new TableField[] { Hostpowerconsumption.HOSTPOWERCONSUMPTION.UNIQUE_ENTRY_ID }, true);
    public static final UniqueKey<NeighbourschangeRecord> NEIGHBOURSCHANGE_PKEY = Internal.createUniqueKey(Neighbourschange.NEIGHBOURSCHANGE, DSL.name("neighbourschange_pkey"), new TableField[] { Neighbourschange.NEIGHBOURSCHANGE.UNIQUE_ENTRY_ID }, true);
    public static final UniqueKey<OsmoticappsstatsRecord> OSMOTICAPPSSTATS_PKEY = Internal.createUniqueKey(Osmoticappsstats.OSMOTICAPPSSTATS, DSL.name("osmoticappsstats_pkey"), new TableField[] { Osmoticappsstats.OSMOTICAPPSSTATS.UNIQUE_ENTRY_ID }, true);
    public static final UniqueKey<OverallappresultsRecord> OVERALLAPPRESULTS_PKEY = Internal.createUniqueKey(Overallappresults.OVERALLAPPRESULTS, DSL.name("overallappresults_pkey"), new TableField[] { Overallappresults.OVERALLAPPRESULTS.UNIQUE_ENTRY_ID }, true);
    public static final UniqueKey<PowerutilisationhistoryRecord> POWERUTILISATIONHISTORY_PKEY = Internal.createUniqueKey(Powerutilisationhistory.POWERUTILISATIONHISTORY, DSL.name("powerutilisationhistory_pkey"), new TableField[] { Powerutilisationhistory.POWERUTILISATIONHISTORY.UNIQUE_ENTRY_ID }, true);
    public static final UniqueKey<RsuinformationRecord> RSUINFORMATION_PKEY = Internal.createUniqueKey(Rsuinformation.RSUINFORMATION, DSL.name("rsuinformation_pkey"), new TableField[] { Rsuinformation.RSUINFORMATION.UNIQUE_ENTRY_ID }, true);
    public static final UniqueKey<SwitchpowerconsumptionRecord> SWITCHPOWERCONSUMPTION_PKEY = Internal.createUniqueKey(Switchpowerconsumption.SWITCHPOWERCONSUMPTION, DSL.name("switchpowerconsumption_pkey"), new TableField[] { Switchpowerconsumption.SWITCHPOWERCONSUMPTION.UNIQUE_ENTRY_ID }, true);
    public static final UniqueKey<TimedSccRecord> TIMED_SCC_PKEY = Internal.createUniqueKey(TimedScc.TIMED_SCC, DSL.name("timed_scc_pkey"), new TableField[] { TimedScc.TIMED_SCC.UNIQUE_ENTRY_ID }, true);
    public static final UniqueKey<VehinformationRecord> DYNAMICINFORMATION_PKEY = Internal.createUniqueKey(Vehinformation.VEHINFORMATION, DSL.name("dynamicinformation_pkey"), new TableField[] { Vehinformation.VEHINFORMATION.DI_ENTRY_ID }, true);
}
