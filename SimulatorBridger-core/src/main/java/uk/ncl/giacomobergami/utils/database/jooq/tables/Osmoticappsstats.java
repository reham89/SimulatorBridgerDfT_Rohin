/*
 * This file is generated by jOOQ.
 */
package uk.ncl.giacomobergami.utils.database.jooq.tables;


import java.util.Collection;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import uk.ncl.giacomobergami.utils.database.jooq.Keys;
import uk.ncl.giacomobergami.utils.database.jooq.Public;
import uk.ncl.giacomobergami.utils.database.jooq.tables.records.OsmoticappsstatsRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Osmoticappsstats extends TableImpl<OsmoticappsstatsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.osmoticappsstats</code>
     */
    public static final Osmoticappsstats OSMOTICAPPSSTATS = new Osmoticappsstats();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<OsmoticappsstatsRecord> getRecordType() {
        return OsmoticappsstatsRecord.class;
    }

    /**
     * The column <code>public.osmoticappsstats.unique_entry_id</code>.
     */
    public final TableField<OsmoticappsstatsRecord, Integer> UNIQUE_ENTRY_ID = createField(DSL.name("unique_entry_id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.osmoticappsstats.appid</code>.
     */
    public final TableField<OsmoticappsstatsRecord, Integer> APPID = createField(DSL.name("appid"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.osmoticappsstats.appname</code>.
     */
    public final TableField<OsmoticappsstatsRecord, String> APPNAME = createField(DSL.name("appname"), SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>public.osmoticappsstats.cloudletmisize</code>.
     */
    public final TableField<OsmoticappsstatsRecord, Double> CLOUDLETMISIZE = createField(DSL.name("cloudletmisize"), SQLDataType.DOUBLE.nullable(false), this, "");

    /**
     * The column
     * <code>public.osmoticappsstats.cloudletproccessingtimebyvm</code>.
     */
    public final TableField<OsmoticappsstatsRecord, Double> CLOUDLETPROCCESSINGTIMEBYVM = createField(DSL.name("cloudletproccessingtimebyvm"), SQLDataType.DOUBLE.nullable(false), this, "");

    /**
     * The column
     * <code>public.osmoticappsstats.datasizeiotdevicetomel_mb</code>.
     */
    public final TableField<OsmoticappsstatsRecord, Integer> DATASIZEIOTDEVICETOMEL_MB = createField(DSL.name("datasizeiotdevicetomel_mb"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.osmoticappsstats.datasizemeltovm_mb</code>.
     */
    public final TableField<OsmoticappsstatsRecord, Integer> DATASIZEMELTOVM_MB = createField(DSL.name("datasizemeltovm_mb"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.osmoticappsstats.destinationvmname</code>.
     */
    public final TableField<OsmoticappsstatsRecord, String> DESTINATIONVMNAME = createField(DSL.name("destinationvmname"), SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>public.osmoticappsstats.edgeletmisize</code>.
     */
    public final TableField<OsmoticappsstatsRecord, Double> EDGELETMISIZE = createField(DSL.name("edgeletmisize"), SQLDataType.DOUBLE.nullable(false), this, "");

    /**
     * The column
     * <code>public.osmoticappsstats.edgeletproccessingtimebymel</code>.
     */
    public final TableField<OsmoticappsstatsRecord, Double> EDGELETPROCCESSINGTIMEBYMEL = createField(DSL.name("edgeletproccessingtimebymel"), SQLDataType.DOUBLE.nullable(false), this, "");

    /**
     * The column <code>public.osmoticappsstats.edgelet_mel_finishtime</code>.
     */
    public final TableField<OsmoticappsstatsRecord, Double> EDGELET_MEL_FINISHTIME = createField(DSL.name("edgelet_mel_finishtime"), SQLDataType.DOUBLE.nullable(false), this, "");

    /**
     * The column <code>public.osmoticappsstats.edgelet_mel_starttime</code>.
     */
    public final TableField<OsmoticappsstatsRecord, Double> EDGELET_MEL_STARTTIME = createField(DSL.name("edgelet_mel_starttime"), SQLDataType.DOUBLE.nullable(false), this, "");

    /**
     * The column <code>public.osmoticappsstats.finishtime</code>.
     */
    public final TableField<OsmoticappsstatsRecord, Double> FINISHTIME = createField(DSL.name("finishtime"), SQLDataType.DOUBLE.nullable(false), this, "");

    /**
     * The column <code>public.osmoticappsstats.iotdevicename</code>.
     */
    public final TableField<OsmoticappsstatsRecord, String> IOTDEVICENAME = createField(DSL.name("iotdevicename"), SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>public.osmoticappsstats.melname</code>.
     */
    public final TableField<OsmoticappsstatsRecord, String> MELNAME = createField(DSL.name("melname"), SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * The column <code>public.osmoticappsstats.melendtransmissiontime</code>.
     */
    public final TableField<OsmoticappsstatsRecord, Double> MELENDTRANSMISSIONTIME = createField(DSL.name("melendtransmissiontime"), SQLDataType.DOUBLE.nullable(false), this, "");

    /**
     * The column <code>public.osmoticappsstats.melstarttransmissiontime</code>.
     */
    public final TableField<OsmoticappsstatsRecord, Double> MELSTARTTRANSMISSIONTIME = createField(DSL.name("melstarttransmissiontime"), SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>public.osmoticappsstats.starttime</code>.
     */
    public final TableField<OsmoticappsstatsRecord, Double> STARTTIME = createField(DSL.name("starttime"), SQLDataType.DOUBLE.nullable(false), this, "");

    /**
     * The column <code>public.osmoticappsstats.oas_transaction</code>.
     */
    public final TableField<OsmoticappsstatsRecord, Integer> OAS_TRANSACTION = createField(DSL.name("oas_transaction"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.osmoticappsstats.transactiontotaltime</code>.
     */
    public final TableField<OsmoticappsstatsRecord, Double> TRANSACTIONTOTALTIME = createField(DSL.name("transactiontotaltime"), SQLDataType.DOUBLE.nullable(false), this, "");

    /**
     * The column
     * <code>public.osmoticappsstats.transmissiontimeiotdevicetomel</code>.
     */
    public final TableField<OsmoticappsstatsRecord, Double> TRANSMISSIONTIMEIOTDEVICETOMEL = createField(DSL.name("transmissiontimeiotdevicetomel"), SQLDataType.DOUBLE.nullable(false), this, "");

    /**
     * The column <code>public.osmoticappsstats.transmissiontimemeltovm</code>.
     */
    public final TableField<OsmoticappsstatsRecord, Double> TRANSMISSIONTIMEMELTOVM = createField(DSL.name("transmissiontimemeltovm"), SQLDataType.DOUBLE.nullable(false), this, "");

    /**
     * The column <code>public.osmoticappsstats.flowiotmelappid</code>.
     */
    public final TableField<OsmoticappsstatsRecord, Integer> FLOWIOTMELAPPID = createField(DSL.name("flowiotmelappid"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.osmoticappsstats.flowmelcloudappid</code>.
     */
    public final TableField<OsmoticappsstatsRecord, Integer> FLOWMELCLOUDAPPID = createField(DSL.name("flowmelcloudappid"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.osmoticappsstats.path_dst</code>.
     */
    public final TableField<OsmoticappsstatsRecord, String> PATH_DST = createField(DSL.name("path_dst"), SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>public.osmoticappsstats.path_src</code>.
     */
    public final TableField<OsmoticappsstatsRecord, String> PATH_SRC = createField(DSL.name("path_src"), SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>public.osmoticappsstats.edgetowanbw</code>.
     */
    public final TableField<OsmoticappsstatsRecord, Double> EDGETOWANBW = createField(DSL.name("edgetowanbw"), SQLDataType.DOUBLE.nullable(false), this, "");

    private Osmoticappsstats(Name alias, Table<OsmoticappsstatsRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Osmoticappsstats(Name alias, Table<OsmoticappsstatsRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.osmoticappsstats</code> table reference
     */
    public Osmoticappsstats(String alias) {
        this(DSL.name(alias), OSMOTICAPPSSTATS);
    }

    /**
     * Create an aliased <code>public.osmoticappsstats</code> table reference
     */
    public Osmoticappsstats(Name alias) {
        this(alias, OSMOTICAPPSSTATS);
    }

    /**
     * Create a <code>public.osmoticappsstats</code> table reference
     */
    public Osmoticappsstats() {
        this(DSL.name("osmoticappsstats"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<OsmoticappsstatsRecord, Integer> getIdentity() {
        return (Identity<OsmoticappsstatsRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<OsmoticappsstatsRecord> getPrimaryKey() {
        return Keys.OSMOTICAPPSSTATS_PKEY;
    }

    @Override
    public Osmoticappsstats as(String alias) {
        return new Osmoticappsstats(DSL.name(alias), this);
    }

    @Override
    public Osmoticappsstats as(Name alias) {
        return new Osmoticappsstats(alias, this);
    }

    @Override
    public Osmoticappsstats as(Table<?> alias) {
        return new Osmoticappsstats(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Osmoticappsstats rename(String name) {
        return new Osmoticappsstats(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Osmoticappsstats rename(Name name) {
        return new Osmoticappsstats(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Osmoticappsstats rename(Table<?> name) {
        return new Osmoticappsstats(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Osmoticappsstats where(Condition condition) {
        return new Osmoticappsstats(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Osmoticappsstats where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Osmoticappsstats where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Osmoticappsstats where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Osmoticappsstats where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Osmoticappsstats where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Osmoticappsstats where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Osmoticappsstats where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Osmoticappsstats whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Osmoticappsstats whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
